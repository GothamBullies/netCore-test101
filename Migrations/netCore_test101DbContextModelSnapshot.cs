// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using netCore_test101.Data;

namespace netCoretest101.Migrations
{
    [DbContext(typeof(netCore_test101DbContext))]
    partial class netCore_test101DbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("netCore_test101.Data.Models.BlogsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<bool?>("Deleted");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Image")
                        .HasMaxLength(50);

                    b.Property<bool>("IsFeatured");

                    b.Property<string>("Keywords")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("LastUpdate");

                    b.Property<string>("Message");

                    b.Property<byte[]>("Timestamp");

                    b.Property<string>("Title")
                        .HasMaxLength(150);

                    b.Property<Guid?>("UserGuid");

                    b.Property<int?>("VideoID");

                    b.HasKey("Id");

                    b.HasIndex("VideoID");

                    b.ToTable("Blogs");
                });

            modelBuilder.Entity("netCore_test101.Data.Models.ConferenceModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasMaxLength(75);

                    b.Property<DateTime?>("DateCreated");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("EndDate");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Image")
                        .HasMaxLength(50);

                    b.Property<bool>("IsFeatured");

                    b.Property<DateTime?>("LastUpdate");

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("StartDate");

                    b.Property<string>("State")
                        .HasMaxLength(2);

                    b.Property<byte[]>("Timestamp");

                    b.Property<string>("URL")
                        .HasMaxLength(300);

                    b.Property<Guid?>("UserGuid");

                    b.Property<string>("Venue")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Conferences");
                });

            modelBuilder.Entity("netCore_test101.Data.Models.FloorPlansModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Amenities");

                    b.Property<decimal>("ApplicationFeeHigh");

                    b.Property<decimal>("ApplicationFeeLow");

                    b.Property<string>("AvailabilityUrl");

                    b.Property<DateTime>("AvailableDate");

                    b.Property<int>("AvailableUnits");

                    b.Property<decimal>("Bedrooms");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<bool?>("Deleted");

                    b.Property<decimal>("DepositHigh");

                    b.Property<decimal>("DepositLow");

                    b.Property<string>("Description");

                    b.Property<decimal>("FullBathrooms");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("HalfBathrooms");

                    b.Property<DateTime?>("LastUpdate");

                    b.Property<decimal>("LeaseTermHigh");

                    b.Property<decimal>("LeaseTermLow");

                    b.Property<string>("Name");

                    b.Property<string>("Photos");

                    b.Property<Guid>("PropertiesGuid");

                    b.Property<decimal>("RentHigh");

                    b.Property<decimal>("RentLow");

                    b.Property<decimal>("SquareFeetHigh");

                    b.Property<decimal>("SquareFeetLow");

                    b.Property<byte[]>("Timestamp");

                    b.Property<int>("TotalUnits");

                    b.Property<string>("UnitCount");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.ToTable("FloorPlans");
                });

            modelBuilder.Entity("netCore_test101.Data.Models.MediaProfilesModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alias")
                        .HasMaxLength(50);

                    b.Property<string>("Company")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("DateCreated");

                    b.Property<bool?>("Deleted");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Image")
                        .HasMaxLength(50);

                    b.Property<bool>("IsFeatured");

                    b.Property<DateTime?>("LastUpdate");

                    b.Property<string>("Links");

                    b.Property<string>("Profile");

                    b.Property<byte[]>("Timestamp");

                    b.Property<Guid?>("UserGuid");

                    b.HasKey("Id");

                    b.ToTable("MediaProfiles");
                });

            modelBuilder.Entity("netCore_test101.Data.Models.NewsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Article");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<bool?>("Deleted");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Image")
                        .HasMaxLength(50);

                    b.Property<bool>("IsFeatured");

                    b.Property<string>("Keywords")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("LastUpdate");

                    b.Property<string>("Source")
                        .HasMaxLength(100);

                    b.Property<byte[]>("Timestamp");

                    b.Property<string>("Title")
                        .HasMaxLength(150);

                    b.Property<Guid?>("UserGuid");

                    b.Property<int?>("VideoID");

                    b.HasKey("Id");

                    b.HasIndex("VideoID");

                    b.ToTable("News");
                });

            modelBuilder.Entity("netCore_test101.Data.Models.PressReleasesModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Address")
                        .HasMaxLength(50);

                    b.Property<string>("Address2")
                        .HasMaxLength(50);

                    b.Property<string>("City")
                        .HasMaxLength(75);

                    b.Property<string>("Company")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("DateCreated");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("Email")
                        .HasMaxLength(150);

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsFeatured");

                    b.Property<string>("Keywords")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("LastUpdate");

                    b.Property<string>("Message");

                    b.Property<string>("Phone")
                        .HasMaxLength(50);

                    b.Property<string>("State")
                        .HasMaxLength(2);

                    b.Property<byte[]>("Timestamp");

                    b.Property<string>("Title")
                        .HasMaxLength(150);

                    b.Property<string>("URL")
                        .HasMaxLength(300);

                    b.Property<Guid?>("UserGuid");

                    b.Property<string>("Zip")
                        .HasMaxLength(5);

                    b.HasKey("Id");

                    b.ToTable("PressReleases");
                });

            modelBuilder.Entity("netCore_test101.Data.Models.PropertiesModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address_City");

                    b.Property<string>("Address_Country");

                    b.Property<double>("Address_Latitude");

                    b.Property<string>("Address_Line1");

                    b.Property<string>("Address_Line2");

                    b.Property<double>("Address_Longitude");

                    b.Property<string>("Address_PostalCode");

                    b.Property<string>("Address_State");

                    b.Property<string>("Amenities");

                    b.Property<string>("Code");

                    b.Property<string>("Content");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("Featured_SetDate");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsFeatured");

                    b.Property<DateTime?>("LastUpdate");

                    b.Property<string>("Name");

                    b.Property<string>("OfficeHours_Sat_Close");

                    b.Property<string>("OfficeHours_Sat_Open");

                    b.Property<string>("OfficeHours_Sat_Status");

                    b.Property<string>("OfficeHours_Sun_Close");

                    b.Property<string>("OfficeHours_Sun_Open");

                    b.Property<string>("OfficeHours_Sun_Status");

                    b.Property<string>("OfficeHours_Week_Close");

                    b.Property<string>("OfficeHours_Week_Open");

                    b.Property<string>("OfficeHours_Week_Status");

                    b.Property<string>("PetPolicy");

                    b.Property<string>("Phone_Extension");

                    b.Property<string>("Phone_Number");

                    b.Property<string>("Phone_Type");

                    b.Property<string>("Photo");

                    b.Property<string>("PropertyPhoto");

                    b.Property<byte[]>("Timestamp");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.ToTable("Properties");
                });

            modelBuilder.Entity("netCore_test101.Data.Models.UsageModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Count");

                    b.Property<DateTime?>("Date");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<bool?>("Deleted");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("LastUpdate");

                    b.Property<byte[]>("Timestamp");

                    b.Property<int?>("UsagePagesId");

                    b.HasKey("Id");

                    b.HasIndex("UsagePagesId");

                    b.ToTable("Usage");
                });

            modelBuilder.Entity("netCore_test101.Data.Models.UsagePagesModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateCreated");

                    b.Property<bool?>("Deleted");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("LastUpdate");

                    b.Property<string>("PageName")
                        .HasMaxLength(50);

                    b.Property<string>("Section")
                        .HasMaxLength(50);

                    b.Property<byte[]>("Timestamp");

                    b.HasKey("Id");

                    b.ToTable("UsagePages");
                });

            modelBuilder.Entity("netCore_test101.Data.Models.UserDetailsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("Company");

                    b.Property<string>("Country");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<bool?>("Deleted");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("LastUpdate");

                    b.Property<string>("Name");

                    b.Property<string>("Phone");

                    b.Property<byte[]>("Timestamp");

                    b.Property<Guid>("UserGuid");

                    b.Property<string>("Website");

                    b.HasKey("Id");

                    b.ToTable("UserDetails");
                });

            modelBuilder.Entity("netCore_test101.Data.Models.VendorCategoriesModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateCreated");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("Description")
                        .HasMaxLength(75);

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("LastUpdate");

                    b.Property<int>("Parent");

                    b.Property<byte[]>("Timestamp");

                    b.HasKey("Id");

                    b.ToTable("VendorCategories");
                });

            modelBuilder.Entity("netCore_test101.Data.Models.VendorsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("About")
                        .HasMaxLength(4000);

                    b.Property<string>("Address")
                        .HasMaxLength(50);

                    b.Property<string>("Address2")
                        .HasMaxLength(50);

                    b.Property<int?>("Category");

                    b.Property<string>("City")
                        .HasMaxLength(75);

                    b.Property<string>("Company")
                        .HasMaxLength(50);

                    b.Property<string>("Contact")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("DateCreated");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("Email")
                        .HasMaxLength(150);

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsFeatured");

                    b.Property<DateTime?>("LastUpdate");

                    b.Property<string>("Phone")
                        .HasMaxLength(50);

                    b.Property<string>("State")
                        .HasMaxLength(2);

                    b.Property<int?>("SubCategory1");

                    b.Property<int?>("SubCategory2");

                    b.Property<int?>("SubCategory3");

                    b.Property<byte[]>("Timestamp");

                    b.Property<string>("URL")
                        .HasMaxLength(300);

                    b.Property<Guid?>("UserGuid");

                    b.Property<int?>("VendorCategoriesId");

                    b.Property<int?>("VideoID");

                    b.Property<string>("Zip")
                        .HasMaxLength(5);

                    b.HasKey("Id");

                    b.HasIndex("VendorCategoriesId");

                    b.ToTable("Vendors");
                });

            modelBuilder.Entity("netCore_test101.Data.Models.VideosModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("DateCreated");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<bool>("Gallery");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsFeatured");

                    b.Property<DateTime?>("LastUpdate");

                    b.Property<string>("Site")
                        .HasMaxLength(50);

                    b.Property<byte[]>("Timestamp");

                    b.Property<string>("Title")
                        .HasMaxLength(50);

                    b.Property<Guid?>("UserGuid");

                    b.Property<int?>("Views");

                    b.HasKey("Id");

                    b.ToTable("Videos");
                });

            modelBuilder.Entity("netCore_test101.Data.Models.WebcastsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alert")
                        .HasMaxLength(150);

                    b.Property<string>("Body");

                    b.Property<string>("Contributors")
                        .HasMaxLength(500);

                    b.Property<DateTime>("Date");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<bool?>("Deleted");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Image");

                    b.Property<bool>("IsFeatured");

                    b.Property<DateTime?>("LastUpdate");

                    b.Property<string>("MediaFile")
                        .HasMaxLength(150);

                    b.Property<string>("Subtitle")
                        .HasMaxLength(150);

                    b.Property<byte[]>("Timestamp");

                    b.Property<string>("Title")
                        .HasMaxLength(150);

                    b.Property<Guid?>("UserGuid");

                    b.HasKey("Id");

                    b.ToTable("Webcasts");
                });

            modelBuilder.Entity("netCore_test101.Data.Models.ZipCodesModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasMaxLength(75);

                    b.Property<DateTime?>("DateCreated");

                    b.Property<bool?>("Deleted");

                    b.Property<Guid?>("Guid")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("LastUpdate");

                    b.Property<string>("State")
                        .HasMaxLength(2);

                    b.Property<byte[]>("Timestamp");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(5);

                    b.HasKey("Id");

                    b.ToTable("ZipCodes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("netCore_test101.Data.Models.BlogsModel", b =>
                {
                    b.HasOne("netCore_test101.Data.Models.VideosModel", "Video")
                        .WithMany()
                        .HasForeignKey("VideoID");
                });

            modelBuilder.Entity("netCore_test101.Data.Models.NewsModel", b =>
                {
                    b.HasOne("netCore_test101.Data.Models.VideosModel", "Video")
                        .WithMany()
                        .HasForeignKey("VideoID");
                });

            modelBuilder.Entity("netCore_test101.Data.Models.UsageModel", b =>
                {
                    b.HasOne("netCore_test101.Data.Models.UsagePagesModel", "UsagePages")
                        .WithMany()
                        .HasForeignKey("UsagePagesId");
                });

            modelBuilder.Entity("netCore_test101.Data.Models.VendorsModel", b =>
                {
                    b.HasOne("netCore_test101.Data.Models.VendorCategoriesModel", "VendorCategories")
                        .WithMany()
                        .HasForeignKey("VendorCategoriesId");
                });
#pragma warning restore 612, 618
        }
    }
}
